# -*- coding: utf-8 -*-
"""cancer_diagnosis_AI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MiFPjdcLOBzlslR6TUxED7jG8lQ-j2Ek
"""

import pandas as pd #pandas: data analysis and manipulation tool
dataset = pd.read_csv('cancer.csv') #read cancer.csv file and store in var: dataset

#set x & y attributes
#y-att: determine whether tumour is malignant or benign
#x-att: all other column values
#AI maps correlation between x and y to "predict" if tumour is malignant

#drop - removes a column

x = dataset.drop(columns= ["diagnosis(1=m, 0=b)"]) #drop diagnosis column, as it is part of the y-att.

y = dataset["diagnosis(1=m, 0=b)"] #store column diagno... to y-att.

#split data into training set and testing set
#done to prevent overfitting the algorithm: algo. does well with given data, but unable to predict behaviours from new given data

#set some data aside to test for later (using sklearn)
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2) #20% of data will be in testing set

#import tensorflow - keras to build neural network ai

import tensorflow as tf

model = tf.keras.models.Sequential()
#building keras layers:
#**sequential model** good for a plain stack of layers where 
#each layer has exactly one input tensor and one output tensor (create models layer-by-layer).

#add layers to module
#in neural network:
  #input layer are all the x-att. for determining info in dataset
  #output layer tells if tumour is malig. or beni.

#input layer
model.add(tf.keras.layers.Dense(256, input_shape = x_train.shape[1:], activation = 'sigmoid')) #Dense: a default layer of neurons from keras library
  #output is 256 neurons
  #input is x_train.shape -> each input containing all the x features
    #modelling as a sigmoid function (all data from neural network outputs plotted between 0 & 1)
    #reduces model complexity and accuracy

#middle layer
model.add(tf.keras.layers.Dense(256, activation = 'sigmoid'))

#output layer
model.add(tf.keras.layers.Dense(1, activation = "sigmoid")) #only one output neuron (0 or 1 for diagnosis)

#compile model

model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
#optimizer = 'adam' - how the machine learning algo. is being optimized (how the neurons are being fine tuned to fit the data))
#loss function - binary classification: good for categorical determination of discrete values
  #loss functions are a measurement of how good the model is in terms of predicting 
  #the expected outcome
#metics - compiling for 'accuracy'

#fit data

model.fit(x_train, y_train, epochs = 1000)
#epochs: no. of times algorithm is iterating over same dataset
#since dataset is small, higher epochs is acceptable

#evaluate algorithm: comparing what model thinks y_test should be vs what y_test actually is
#x_test: our testing set
model.evaluate(x_test, y_test)

#output of accuracy -> means how well AI can correctly classify tumours for being malignant or benign when given NEW DATA